/** An 8-bit signed integer. */
declare type int8 = number;

/** An 8-bit unsigned integer. */
declare type uint8 = number;

/** A 32-bit signed integer. */
declare type int32 = number;

/** A 32-bit unsigned integer. */
declare type uint32 = number;

/** A 64-bit signed integer. */
declare type int64 = number;

/** A 64-bit unsigned integer. */
declare type uint64 = number;

/** A 32-bit float. */
declare type float32 = number;

/** A 64-bit float. */
declare type float64 = number;

/** A 32-bit unsigned integer when targeting WASM32 respectively a 64-bit unsigned integer when targeting WASM64. */
declare type intptr = number;

/** A class describing a pointer to a data structure. */
declare class IntPtr<T> {
    public offset: intptr;
    public value: T;
    constructor(offset: intptr);
    public increment(diff: intptr): this;
    public decrement(diff: intptr): this;
}

/** Retrieves the byte size of a data structure. */
declare function sizeof<T>(): intptr;
